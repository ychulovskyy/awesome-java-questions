{"name":"Awesome-java-questions","tagline":"","body":"### Welcome to Awesome Java Questions\r\n## Basics\r\n1. Differences between JDK and JRE\r\n1. Mention all Java primitive types and their wrappers\r\n1. Access modifier\r\n1. == vs equals\r\n1. What is initialization order of static variables, non static variables and constructor in classes A and B, where class B is subclass of class A?\r\n1. this() and super() in constructor\r\n1. Difference between Interface and Abstract class\r\n1. Are parameters passed by value or by reference? Will method(String s) { s = null} have effect outside of method?\r\n1. Examples of marker interfaces in Java\r\n1. May we have several classes in one Java file? Any limitations?\r\n1. Why String are immutable in Java?\r\n1. What is Java String pool? Why it's needed?\r\n1. What is Java Integer pool? What is default range? How to modify it?\r\n1. How to make class immutable?\r\n1. What is the difference between StringBuffer and StringBuilder?\r\n1. Sun code convention (name conventions for constant/variable/method/class, varibale declaration order depending on access modificator and static/non-static keyword, line width, etc.)\r\n1. Transient keyword\r\n1. May we serialize static variable?\r\n1. Serialization vs Externalization\r\n1. Nested vs inner classes\r\n1. Which tool you can use to control code quality?\r\n1. Class loders. In which locations it will search for a class? Is it possible to get 2 instances of correctly implemented Singleton?\r\n\r\n## Collections\r\n1. Mention all methods of Collection interface\r\n1. Mention all implemntations of Set, Map and List interfaces\r\n1. ArrayList vs LinkedList, which one to use and when? What if you need to insert 1M elements at the end of list? In the middle of list during iteration? Remove many elements? Time complexity of operations with ArrayList and LinkedList\r\n1. Iterator vs ListIterator vs Enumerator\r\n1. What iterator fail-fast strategy means? What is difference between fail-fast and fail-safe?\r\n1. How to make HashMap thread-safe? Alternative HashMap implementations?\r\n1. Internal structure of HashMap\r\n1. Time complexity of operations with HashMap\r\n1. Internal implementation of HashSet\r\n1. How to make HashMap type-safe? During runtime?\r\n1. How implementation of hashCode() may affect HashMap perfromance?\r\n1. What if we use byte[] as key for HashMap?\r\n1. What hasCode() returns if we don't override it?\r\n1. If 2 objects has the same hashCode() does it means that they are equals? Vice versa?\r\n1. Is it possible to loose an element in HashMap? (add element into the collection and don't find it there later)\r\n1. What is difference between Comparable and Comparator interface?\r\n1. How to avoid modification of a collection if you need to send it to other methods as parameter?\r\n\r\n## Garbage Collectors\r\n\r\n\r\n## Exceptions\r\n1. What are the two types of Exceptions in Java ? Which are the differences between them ?\r\n1. What is the difference between Exception and Error in java ?\r\n1. What is exception propagation?\r\n\r\n\r\n## Java 5+\r\n1. Generics benefits\r\n1. Generics: Producer extends and Consumer super principle\r\n1. Benefits of Enum over final public fields in a class\r\n1. Describe all methods of iteration over elements in a List (for, while, for :, streams)\r\n1. What is annotation? What is retention type? What retention types do you know?\r\n\r\n## Multithreading\r\n1. Java Thread Life cycle\r\n1. Runable vs Callable\r\n1. What is daemon thread?\r\n1. Volatile keyword? It it the same as synchronize() on setter/getter? Does it make sense to define volatile primitive/object?","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}